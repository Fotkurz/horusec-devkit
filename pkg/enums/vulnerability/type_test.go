// Copyright 2020 ZUP IT SERVICOS EM TECNOLOGIA E INOVACAO SA
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package vulnerability

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestToString(t *testing.T) {
	t.Run("should success parse to string", func(t *testing.T) {
		assert.Equal(t, "Vulnerability", Vulnerability.ToString())
		assert.Equal(t, "Corrected", Corrected.ToString())
		assert.Equal(t, "False Positive", FalsePositive.ToString())
		assert.Equal(t, "Risk Accepted", RiskAccepted.ToString())
	})
}

func TestMap(t *testing.T) {
	t.Run("should success parse to map", func(t *testing.T) {
		mapValues := Map()
		assert.NotEmpty(t, mapValues)

		assert.Equal(t, Vulnerability, mapValues["Vulnerability"])
		assert.Equal(t, RiskAccepted, mapValues["Risk Accepted"])
		assert.Equal(t, FalsePositive, mapValues["False Positive"])
		assert.Equal(t, Corrected, mapValues["Corrected"])
		assert.Equal(t, Unknown, mapValues["UNKNOWN"])
	})
}

func TestGetSeverityByString(t *testing.T) {
	t.Run("should success get severity value by string", func(t *testing.T) {
		assert.Equal(t, Vulnerability, GetVulnTypeByString("Vulnerability"))
		assert.Equal(t, RiskAccepted, GetVulnTypeByString("Risk Accepted"))
		assert.Equal(t, FalsePositive, GetVulnTypeByString("False Positive"))
		assert.Equal(t, Corrected, GetVulnTypeByString("Corrected"))
		assert.Equal(t, Unknown, GetVulnTypeByString("UNKNOWN"))
	})

	t.Run("should return unknown when invalid string value", func(t *testing.T) {
		assert.Equal(t, Unknown, GetVulnTypeByString("test"))
	})
}

func TestContains(t *testing.T) {
	t.Run("should return true when contains value", func(t *testing.T) {
		assert.True(t, Contains("Vulnerability"))
		assert.True(t, Contains("Risk Accepted"))
		assert.True(t, Contains("False Positive"))
		assert.True(t, Contains("Corrected"))
		assert.True(t, Contains("UNKNOWN"))
	})

	t.Run("should return false when not contains value", func(t *testing.T) {
		assert.False(t, Contains("false"))
	})
}

func TestValues(t *testing.T) {
	t.Run("should return 5 valid values", func(t *testing.T) {
		assert.Len(t, Values(), 5)
	})
}
